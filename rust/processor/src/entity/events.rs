//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use crate::utils::util::standardize_address;
use aptos_protos::transaction::v1::Event as EventPB;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "events")]
pub struct Model {
    pub sequence_number: i64,
    pub creation_number: i64,
    pub account_address: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub transaction_version: i64,
    pub transaction_block_height: i64,
    pub event_type: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub data: Json,
    #[sea_orm(primary_key, auto_increment = false)]
    pub event_index: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {
    pub fn from_events(
        events: &[EventPB],
        transaction_version: i64,
        transaction_block_height: i64,
    ) -> Vec<Self> {
        events
            .iter()
            .enumerate()
            .map(|(index, event)| {
                Self::from_event(
                    event.clone(),
                    transaction_version,
                    transaction_block_height,
                    index as i64,
                )
            })
            .collect::<Vec<ActiveModel>>()
    }

    fn from_event(
        event: EventPB,
        transaction_version: i64,
        transaction_block_height: i64,
        event_index: i64,
    ) -> Self {
        Self {
            sequence_number: sea_orm::ActiveValue::Set(event.sequence_number as i64),
            creation_number: sea_orm::ActiveValue::Set(
                event.key.as_ref().unwrap().creation_number as i64,
            ),
            account_address: sea_orm::ActiveValue::Set(
                standardize_address(event.key.as_ref().unwrap().account_address.as_str())
            ),
            transaction_version: sea_orm::ActiveValue::Set(transaction_version),
            transaction_block_height: sea_orm::ActiveValue::Set(transaction_block_height),
            event_type: sea_orm::ActiveValue::Set(event.type_str.clone()),
            data: sea_orm::ActiveValue::Unchanged(
                serde_json::from_str(event.data.as_str()).expect("Failed to parse JSON"),
            ),
            event_index: sea_orm::ActiveValue::Set(event_index),
        }
    }
}
