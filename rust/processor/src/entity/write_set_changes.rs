//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use super::{
    write_set_changes_module::ActiveModel as WriteSetChangesModule,
    write_set_changes_resource::ActiveModel as WriteSetChangesResource,
    write_set_changes_table::ActiveModel as WriteSetChangesTable,
};
use crate::{
    models::default_models::write_set_changes::{WriteSetChangeDetail, WriteSetChangeModel},
    utils::util::truncate_str,
};
use sea_orm::entity::prelude::*;
use serde_json::json;

pub enum WriteSetChangeEnum {
    Module(WriteSetChangesModule),
    Resource(WriteSetChangesResource),
    Table(WriteSetChangesTable),
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "write_set_changes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub transaction_version: String,
    pub transaction_block_height: i64,
    pub hash: String,
    pub write_set_change_type: String,
    pub address: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub index: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

// p99 currently is 296 so using 300 as a safe max length
const WRITE_RESOURCE_TYPE_MAX_LENGTH: usize = 300;

impl ActiveModel {
    pub fn from_wscs(
        write_set_changes: Vec<WriteSetChangeModel>,
        write_set_change_details: Vec<WriteSetChangeDetail>,
    ) -> Vec<WriteSetChangeEnum> {
        write_set_changes
            .iter()
            .zip(write_set_change_details.iter())
            .map(|(write_set_change, write_set_change_detail)| {
                Self::from_wsc(write_set_change, write_set_change_detail)
            })
            .collect()
    }

    fn from_wsc(
        write_set_change: &WriteSetChangeModel,
        write_set_change_detail: &WriteSetChangeDetail,
    ) -> WriteSetChangeEnum {
        let transaction_version = write_set_change.transaction_version;
        let index = write_set_change.index;
        let hash = write_set_change.hash.clone();
        let transaction_block_height = write_set_change.transaction_block_height;
        let write_set_change_type = write_set_change.type_.to_string();
        let address = write_set_change.address.clone();

        match write_set_change_detail {
            WriteSetChangeDetail::Module(move_module) => {
                WriteSetChangeEnum::Module(WriteSetChangesModule {
                    transaction_version: sea_orm::ActiveValue::Set(transaction_version.to_string()),
                    transaction_block_height: sea_orm::ActiveValue::Set(transaction_block_height),
                    hash: sea_orm::ActiveValue::Set(hash),
                    write_set_change_type: sea_orm::ActiveValue::Set(write_set_change_type),
                    address: sea_orm::ActiveValue::Set(address),
                    index: sea_orm::ActiveValue::Set(index),
                    is_deleted: sea_orm::ActiveValue::Set(move_module.is_deleted),
                    bytecode: sea_orm::ActiveValue::Set(move_module.bytecode.clone()),
                    friends: sea_orm::ActiveValue::Set(
                        Some(serde_json::to_value(&move_module.friends).unwrap())
                    ),
                    exposed_functions: sea_orm::ActiveValue::Set(
                        Some(serde_json::to_value(&move_module.exposed_functions).unwrap())
                    ),
                    structs: sea_orm::ActiveValue::Set(
                        Some(serde_json::to_value(&move_module.structs).unwrap())
                    ),
                })
            },
            WriteSetChangeDetail::Resource(move_resource) => {
                WriteSetChangeEnum::Resource(WriteSetChangesResource {
                    transaction_version: sea_orm::ActiveValue::Set(transaction_version.to_string()),
                    transaction_block_height: sea_orm::ActiveValue::Set(transaction_block_height),
                    hash: sea_orm::ActiveValue::Set(hash),
                    write_set_change_type: sea_orm::ActiveValue::Set(write_set_change_type),
                    address: sea_orm::ActiveValue::Set(address),
                    index: sea_orm::ActiveValue::Set(index),
                    is_deleted: sea_orm::ActiveValue::Set(move_resource.is_deleted),
                    name: sea_orm::ActiveValue::Set(move_resource.name.clone()),
                    module: sea_orm::ActiveValue::Set(move_resource.module.clone()),
                    generic_type_params: sea_orm::ActiveValue::Set(
                        Some(serde_json::to_value(&move_resource.generic_type_params).unwrap())
                    ),
                    data: sea_orm::ActiveValue::Set(
                        Some(serde_json::to_value(&move_resource.data).unwrap())
                    ),
                    state_key_hash: sea_orm::ActiveValue::Set(move_resource.state_key_hash.clone()),
                    data_type: sea_orm::ActiveValue::Set(Some(truncate_str(
                        &move_resource.type_.clone(),
                        WRITE_RESOURCE_TYPE_MAX_LENGTH,
                    ))),
                })
            },
            WriteSetChangeDetail::Table(table_item, _, table_metadata) => {
                let decoded_key = serde_json::to_value(&table_item.decoded_key).unwrap();
                let decoded_value = Some(serde_json::to_value(&table_item.decoded_value).unwrap());
                let key_type = table_metadata
                    .as_ref()
                    .map(|metadata| metadata.key_type.clone());
                let value_type = table_metadata
                    .as_ref()
                    .map(|metadata| metadata.value_type.clone());
                let data: Option<serde_json::Value> =
                    match (decoded_key, decoded_value, key_type, value_type) {
                        (decoded_key, Some(decoded_value), key_type, value_type) => Some(json!({
                            "decoded_key": decoded_key,
                            "decoded_value": decoded_value,
                            "key_type": key_type,
                            "value_type": value_type,
                        })),
                        _ => None,
                    };

                WriteSetChangeEnum::Table(WriteSetChangesTable {
                    transaction_version: sea_orm::ActiveValue::Set(transaction_version.to_string()),
                    transaction_block_height: sea_orm::ActiveValue::Set(transaction_block_height),
                    hash: sea_orm::ActiveValue::Set(hash),
                    write_set_change_type: sea_orm::ActiveValue::Set(write_set_change_type),
                    address: sea_orm::ActiveValue::Set(address),
                    index: sea_orm::ActiveValue::Set(index),
                    is_deleted: sea_orm::ActiveValue::Set(table_item.is_deleted),
                    table_handle: sea_orm::ActiveValue::Set(table_item.table_handle.clone()),
                    key: sea_orm::ActiveValue::Set(table_item.key.clone()),
                    data: sea_orm::ActiveValue::Set(data),
                })
            },
        }
    }
}
